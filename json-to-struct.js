$(document).ready(function(){
  var go =""

  //KeyMap is used as map instead of array for future use.
  var keyMap = new Map();
  var tab = 0
  var data ='{"Header": "headerdata", "body":{"body1": "body1data", "body2": {"la": {"fa":"tuku"}}}, "tail":{"tick": "tock"}}'
  $("#convertData").click(function(){
      convertToStruct("",JSON.parse(data));
      var mapIter = keyMap.values();
      //var mapData = new Map();
      finalData =[]
      for (var i=0;i<keyMap.size; i++){
      //  appendString(mapIter.next().value)
        finalData[i]=mapIter.next().value;
        //finalData.push(mapIter.next().valu)
      }
    //  console.log("size of finalData", finalData.length);
      for(var j=finalData.length-1; j=0;j--){
        appendString(finalData[j])
      }
      console.log("Final data ::::", go);
  });

function convertToStruct(keyName, objectData){
  if(keyName == ""){
    keyName = "AutoGenerated"
  }
  var str = JSON.stringify(objectData);
  var nestedGo ="";

  var jsonObject;
  try {
      jsonObject = JSON.parse(str);
  } catch (e) {
      console.log("invalid json format");
      return;
  }
  nestedGo += "type "+firstLetterUppercase(keyName)+" struct {\n"
  for(var k in jsonObject){
    if( goType(jsonObject[k]) === "struct"){
      convertToStruct(firstLetterUppercase(k), jsonObject[k] )
    }
    nestedGo += "\t"+firstLetterUppercase(k)+" "+goType(jsonObject[k])+' `json:"'+k+'"`\n'
  }
  nestedGo +="}\n"
  keyMap.set(keyName, nestedGo)

}



function goType(val){
  switch (typeof val)
		{
			case "string":
					return "string";
			case "number":
				if (val % 1 === 0)
				{
						return "int";
				}
				else
					return "float64";
			case "boolean":
				return "bool";
			case "object":
        console.log("inside object");
				if (Array.isArray(val))
					return "slice";
				return "struct";
			default:
				return "notFound";
		}

}


function appendString(str){
  go += str;

}

function firstLetterUppercase(str){
  return str.charAt(0).toUpperCase() + str.slice(1);
}

});
